// Refactoring ui mark up
component Clock inherits Text {
	horizontal-alignment: center;

	font-weight: 700;
	color: white;
}

component Progress inherits Rectangle {
	in property <percent> progress: 0%;

	width: 100%;
	height: 12px;

	border-radius: 5px;
	background: black;

	// Filled progress
	Rectangle {
		border-radius: parent.border-radius;
		background: @linear-gradient(45deg, #8aadf4ee 0%, #c6a0f6ee 100%);
		
		height: parent.height;
		width: parent.width * progress;
		x: 0px;

		animate width {
			duration: 300ms;
			easing: ease-out;
		}
	}
}

component Control inherits Rectangle {
	in property <string> font-family;
	in property <string> text;

	width: 100px;
	height: 30px;
	border-radius: 10px;
	background: #595959aa;

	Text {
		font-size: parent.height * 0.75;
		font-weight: 600;
		color: white;

		// Passed properties
		text: root.text;
		font-family: root.font-family;
	}
}

export component MainWindow inherits Window {
	// in property - public to other scopes
	// property - private
	callback refresh();
	in property <string> time;
	in property <bool> clock_active: false;
	in property <percent> progress;

	/* TODO: Add somewhere to store config */
	// Configurations
	// Font
	in property <string> font_family: "Adwaita Mono";
	in property <int> font_weight: 700;
	in property <percent> font_size: 25%;
	in property <color> font_color: white;
	// Window
	in property <color> background_color: rgba(35, 38, 52, 0.5);
	// Progressbar 
	in property <percent> progress_width: 75%;
	in property <percent> progress_height: 25%;
	background: background_color;

	VerticalLayout {
		alignment: center;

		clock := Clock {
			font-family: font_family;
			font-size: (root.height)*font_size; 
			font-weight: font_weight;
			color: font_color;
			text: time;
		}

		Progress { 
			progress: progress; 
		
			width: progress_width;
			height: progress_height;
		}

		// Center button
/*		HorizontalLayout {
			Control { font-family: font; text: "STOP"; }
		}
*/
	}

	timer := Timer {
		interval: 1s;
		running: clock_active;
		triggered() => {
			refresh();
		}
	}
}
